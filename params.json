{
  "name": "Assertc",
  "tagline": "assertion and testing framework for C",
  "body": "# assert\r\nassertion and testing framework for C\r\n\r\n- easy to use\r\n- simple syntax\r\n\r\n### follow [Trello board](https://trello.com/b/tlrct2bU/assert)\r\n\r\n#### need an example?\r\n\r\n```C\r\n#include <stdio.h>\r\n#include \"assert.h\"\r\n\r\nmodule(byte)\r\n{\r\n    suite(\"Checking if byte assertions are working fine\")\r\n    {\r\n        suite(\"bool\")\r\n        {\r\n            test(\"Should pass if true == true\")\r\n            {\r\n                expect_bool(true) to be equal(true);\r\n            } end\r\n            test(\"Should pass if true != false\")\r\n            {\r\n                expect_bool(false) to not be equal(true);\r\n            } end\r\n        } end\r\n        suite(\"char\")\r\n        {\r\n            test(\"Should pass if 'c' == 'c'\")\r\n            {\r\n                expect_char('c') to be equal('c');\r\n            } end\r\n            test(\"Should pass if 'c' != 'd'\")\r\n            {\r\n                expect_char('c') to not be equal('d');\r\n            } end\r\n        }end\r\n    } end\r\n}\r\nmodule(number)\r\n{\r\n    suite(\"Checking if number assertions are working fine\")\r\n    {\r\n        suite(\"short\")\r\n        {\r\n            test(\"Should pass if 5 == 5\")\r\n            {\r\n                expect_short(5) to be equal(5);\r\n            } end\r\n            test(\"Should pass if 5 != 6\")\r\n            {\r\n                expect_short(5) to not be equal(6);\r\n            } end\r\n        } end\r\n\r\n        suite(\"int\")\r\n        {\r\n            test(\"Should pass if 10 == 10\")\r\n            {\r\n                expect_int(10) to be equal(10);\r\n            } end\r\n            test(\"Should pass if 10 != 11\")\r\n            {\r\n                expect_int(10) to not be equal(11);\r\n            } end\r\n        } end\r\n\r\n        suite(\"long\")\r\n        {\r\n            test(\"Should pass if 100L == 100L\")\r\n            {\r\n                expect_long(100L) to be equal(100L);\r\n            } end\r\n            test(\"Should pass if 100L != 101L\")\r\n            {\r\n                expect_long(100L) to not be equal(101L);\r\n            } end\r\n        } end\r\n\r\n        suite(\"float\")\r\n        {\r\n            test(\"Should pass if 10.02 == 10.02\")\r\n            {\r\n                expect_float(10.02) to be equal(10.02);\r\n            } end\r\n            test(\"Should pass if 10.02 != 10.03\")\r\n            {\r\n                expect_float(10.02) to not be equal(10.03);\r\n            } end\r\n        } end\r\n\r\n        suite(\"double\")\r\n        {\r\n            test(\"Should pass if 10.25 == 10.25\")\r\n            {\r\n                expect_double(10.25) to be equal(10.25);\r\n            } end\r\n            test(\"Should pass if 10.25 != 10.20\")\r\n            {\r\n                expect_double(10.25) to not be equal(10.20);\r\n            } end\r\n        } end\r\n    } end\r\n}\r\n\r\nmodule(string)\r\n{\r\n    suite(\"Checking if string assertions are working fine\")\r\n    {\r\n        suite(\"string (char *)\")\r\n        {\r\n            test(\"Should pass if \\\"Hello\\\" == \\\"Hello\\\"\")\r\n            {\r\n                expect_string(\"Hello\") to be equal(\"Hello\");\r\n            } end\r\n            test(\"Should pass if \\\"Hello\\\" != \\\"World\\\"\")\r\n            {\r\n                expect_string(\"Hello\") to not be equal(\"World\");\r\n            } end\r\n            pending(\"Test case to compare pointers\");\r\n        } end\r\n    } end\r\n}\r\n\r\nint main()\r\n{\r\n    register_module(number);\r\n    register_module(byte);\r\n    register_module(string);\r\n    run_all();\r\n    return 0;\r\n}\r\n```\r\n\r\n#### output\r\n\r\n```\r\nChecking if number assertions are working fine\r\n\r\n    short\r\n        ✓ Should pass if 5 == 5\r\n        ✓ Should pass if 5 != 6\r\n\r\n    int\r\n        ✓ Should pass if 10 == 10\r\n        ✓ Should pass if 10 != 11\r\n\r\n    long\r\n        ✓ Should pass if 100L == 100L\r\n        ✓ Should pass if 100L != 101L\r\n\r\n    float\r\n        ✓ Should pass if 10.02 == 10.02\r\n        ✓ Should pass if 10.02 != 10.03\r\n\r\n    double\r\n        ✓ Should pass if 10.25 == 10.25\r\n        ✓ Should pass if 10.25 != 10.20\r\n\r\nChecking if byte assertions are working fine\r\n\r\n    bool\r\n        ✓ Should pass if true == true\r\n        ✓ Should pass if true != false\r\n\r\n    char\r\n        ✓ Should pass if 'c' == 'c'\r\n        ✓ Should pass if 'c' != 'd'\r\n\r\nChecking if string assertions are working fine\r\n\r\n    string (char *)\r\n        ✓ Should pass if \"Hello\" == \"Hello\"\r\n        ✓ Should pass if \"Hello\" != \"World\"\r\n        ! Test case to compare pointers\r\n\r\n\r\n SUMMARY:\r\n\r\n✓  16 Successful\r\n!   1 Pending\r\n\r\n\r\n SUCCESSFUL\r\n```\r\n\r\njust started working on it\r\n\r\nfeel free to suggest, fork, add new features\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}